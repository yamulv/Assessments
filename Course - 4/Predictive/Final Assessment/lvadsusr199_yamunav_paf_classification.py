# -*- coding: utf-8 -*-
"""LVADSUSR199_YamunaV_PAF_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKv19ArF9kPYwspeFogyxEk6hVI-NYwJ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv("/content/drive/MyDrive/PA_Final_today/penguins_classification.csv")

df.head()

df.shape

df.describe(include='all').T

df.columns

df['species'].value_counts()

df['island'].value_counts()

df.isnull().sum()

df.info()

df["bill_depth_mm"] = df["bill_depth_mm"].fillna(df["bill_depth_mm"].mean())

df.isnull().sum()

df.duplicated().sum()

num_cols = df.select_dtypes(include=["int64","float64"]).columns
cor_mat = df[num_cols].corr()
sns.heatmap(cor_mat, annot =True, fmt = ".2f")
plt.show()

for column in df.select_dtypes(include=["int64","float64"]).columns:
  sns.boxplot(x = df[column])
  plt.show()

for column in df.select_dtypes(include=["int64","float64"]).columns:
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3 - q1
  l = q1 - 1.5 * iqr
  u = q3 + 1.5 * iqr
  df[column] = df[column].clip(lower=l, upper=u)
  sns.boxplot(x = df[column])
  plt.show()

label_e = LabelEncoder()
for column in df.select_dtypes(include=["object"]).columns:
  df[column]= label_e.fit_transform(df[column])

df.head()

df['species'].value_counts()

X = df.drop(columns=["year","species"])
y = df["species"]

X_train, X_test, y_train, y_test = train_test_split(  X,y, test_size = 0.3, random_state = 42)

scaler = StandardScaler()
X_train_s = scaler.fit_transform(X_train)
X_test_s = scaler.transform(X_test)

y_test.value_counts()

X.columns

model_1 = LogisticRegression()
model_1.fit(X_train_s,y_train)

pred_1 = model_1.predict(X_test_s)

print("Accuracy score:", accuracy_score(y_test, pred_1))

print("Classification Report:")
print(classification_report(y_test, pred_1))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, pred_1),annot = True, fmt=".2f")

model_2 = DecisionTreeClassifier()
model_2.fit(X_train_s,y_train)

pred_2 = model_2.predict(X_test_s)

print("Accuracy score:", accuracy_score(y_test, pred_2))

print("Classification Report:")
print(classification_report(y_test, pred_2))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, pred_2),annot = True, fmt=".2f")

model_3 = RandomForestClassifier(n_estimators = 100, random_state = 42)
model_3.fit(X_train_s,y_train)

pred_3 = model_3.predict(X_test_s)

print("Accuracy score:", accuracy_score(y_test, pred_3))

print("Classification Report:")
print(classification_report(y_test, pred_3))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, pred_3),annot = True, fmt=".2f")

model_4 = XGBClassifier(eta=0.01, gamma = 10)
model_4.fit(X_train_s,y_train)

pred_4 = model_4.predict(X_test_s)

print("Accuracy score:", accuracy_score(y_test, pred_4))

print("Classification Report:")
print(classification_report(y_test, pred_4))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, pred_4),annot = True, fmt=".2f")