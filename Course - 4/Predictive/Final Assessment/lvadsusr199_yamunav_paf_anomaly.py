# -*- coding: utf-8 -*-
"""LVADSUSR199_YamunaV_PAF_Anomaly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yio-27-woPybnY7Njvs8rSrl0RCcqKCX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder
from sklearn.metrics import silhouette_score

df = pd.read_csv("/content/drive/MyDrive/PA_Final_today/anomaly_train.csv")

df.head()

df.info()

df.describe(include='all').T

df.shape

df.isnull().sum()

df.duplicated().sum()

num_cols = df.select_dtypes(include=["int64","float64"]).columns
cor_mat = df[num_cols].corr()
sns.heatmap(cor_mat, annot =True, fmt = ".2f")
plt.show()

for column in df.select_dtypes(include=["int64","float64"]).columns:
  sns.boxplot(x = df[column])
  plt.show()

label_e = LabelEncoder()
for column in df.select_dtypes(include=["object"]).columns:
  df[column]= label_e.fit_transform(df[column])

df.head()

df = df.drop(columns = ["TransactionID"])

X = df

X.columns

model = IsolationForest(n_estimators = 100, contamination = 0.01)
model.fit(X)

pred = model.predict(X)

X['anomaly score'] = model.decision_function(X)

X.head()

anomalies = X[X['anomaly score']<0]

anomalies.head()

plt.scatter(X['Amount'],X['anomaly score'],color = "red", label = "normal")
plt.scatter(anomalies['Amount'],anomalies['anomaly score'],color = "yellow", label = "Anomaly")
plt.legend()
plt.show()

plt.scatter(X['Type'],X['anomaly score'],color = "red", label = "normal")
plt.scatter(anomalies['Type'],anomalies['anomaly score'],color = "yellow", label = "Anomaly")
plt.legend()
plt.show()

plt.scatter(X['Location'],X['anomaly score'],color = "red", label = "normal")
plt.scatter(anomalies['Location'],anomalies['anomaly score'],color = "yellow", label = "Anomaly")
plt.legend()
plt.show()

plt.scatter(X['User'],X['anomaly score'],color = "red", label = "normal")
plt.scatter(anomalies['User'],anomalies['anomaly score'],color = "yellow", label = "Anomaly")
plt.legend()
plt.show()