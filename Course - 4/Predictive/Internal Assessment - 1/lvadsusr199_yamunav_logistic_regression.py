# -*- coding: utf-8 -*-
"""LVADSUSR199_YamunaV_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_rf8ywqMjPnOwupOsZ8yMZMfu32K34Ku
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv("/content/booking.csv")

df.head()

df.describe(include='all').T

df.shape

df.columns

df.info()

#1
df.isnull().sum()

df['room type']=df['room type'].fillna(df['room type'].mode()[0])
df['average price']=df['average price'].fillna(df['average price'].mean())

df.isnull().sum()

for column in df.select_dtypes(include=["int64","float64"]).columns:
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3 - q1
  l = q1 - 1.5 * iqr
  u = q3 + 1.5 * iqr
  df[column] = df[column].clip(lower=l,upper=u)
  sns.boxplot(x=df[column])
  plt.title(f'boxplot of {column}')
  plt.show()

#2
from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()

for column in df.select_dtypes(include= "object").columns:
  df[column] = label_encoder.fit_transform(df[column])

df.head()

#3
num_col = df.select_dtypes(include=["int64","float64"]).columns
corr = df[num_col].corr()
plt.figure(figsize=(20,8))
sns.heatmap(corr, annot =True, fmt= ".2f", cmap="coolwarm")
plt.title("Correlation matrix")
plt.show()

df.duplicated().sum()

df = df.drop(columns = ["Booking_ID","date of reservation"])

df.columns

#4
X = df.drop(columns = ["booking status"])
y = df["booking status"]

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size= 0.3, random_state = 42)

#5
scaler = MinMaxScaler()
X_train_s = scaler.fit_transform(X_train)
X_test_s = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_s, y_train)

pred = model.predict(X_test_s)

#6
confusion_mat = confusion_matrix(y_test,pred)

print("Confusion_Matrix:")
print(confusion_mat)

cr = classification_report(y_test,pred)
print("classification_report")
print(cr)